{"version":3,"sources":["serviceWorker.js","components/Header/Header.js","components/Toolbar/Toolbar.js","components/DonutChart/DonutChart.js","components/StatsTable/StatsTable.js","utils/ChatParser.js","components/FileReader/FileReader.js","components/SiteLayout/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","props","className","toolbar","href","modData","chartData","newSet","labels","datasets","label","backgroundColor","hoverBackgroundColor","data","forEach","element","push","name","color","messageCount","donut","options","title","display","text","fontSize","legend","position","StatsTable","tableData","map","row","idx","id","key","ParseChat","content","generateRandomColor","Math","floor","random","toString","colorUsed","ChatData","ChatJSON","newContent","split","indexOf","trim","replace","ImportFromFileBodyComponent","fileReader","handleFileRead","e","result","onChangeData","ChatParser","parseChatToArrayJSON","type","accept","onChange","file","target","files","FileReader","onloadend","readAsText","SiteLayout","state","this","setState","bind","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b97e68ec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport './Header.css'\nconst Header = props => (\n<div className='header'>\n    <div className=\"header__content\">\nWhatsapp <span>Stats</span>\n</div>\n</div>\n)\nexport default Header;","import React from 'react'\nimport './Toolbar.css'\nconst toolbar = props => (\n<header className=\"toolbar\">\n<div className=\"toolbar__logo\"><a href=\"/\" >WhatsApp <br></br><span>Stats</span></a></div>\n    <nav className=\"toolbar__navigation\">\n        <ul className='nav-links'>\n          <li>Home</li>\n          <li>about us</li>\n        </ul>\n      \n    </nav>\n</header>\n)\nexport default toolbar;","import React from \"react\";\nimport \"./DonutChart.css\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nconst state = {\n  labels: [\"Nakul\", \"Ritika\", \"Sumeet\", \"Shubham\", \"Grejoy\"],\n  datasets: [\n    {\n      label: \"Messagfes\",\n      backgroundColor: [\"#B21F00\", \"#C9DE00\", \"#2FDE00\", \"#00A6B4\", \"#6800B4\"],\n      hoverBackgroundColor: [\n        \"#501800\",\n        \"#4B5000\",\n        \"#175000\",\n        \"#003350\",\n        \"#35014F\",\n      ],\n      data: [65, 59, 80, 81, 56],\n    },\n  ],\n};\nconst modData = (chartData) => {\n  var newSet = { labels: [], datasets: [{ label:'',backgroundColor:[],hoverBackgroundColor:[],data:[] }] };\n\n  chartData.forEach((element) => {\n    newSet.labels.push(element.name);\n    newSet.datasets[0].backgroundColor.push(element.color);\n    newSet.datasets[0].hoverBackgroundColor.push(element.color);\n    newSet.datasets[0].data.push(element.messageCount);\n  });\n  return newSet;\n};\n\nconst donut = (props) => (\n  <div className=\"donut\">\n    <Doughnut\n      data={modData(props.chartData)}\n      options={{\n        title: {\n          display: true,\n          text: \"Text messages sent on  \" +props.title+\"\",\n          fontSize: 20,\n        },\n        legend: {\n          display: false,\n          position: \"bottom\",\n        },\n      }}\n    />\n  </div>\n);\nexport default donut;\n","import React from 'react';\nimport './StatsTable.css';\n\nlet createTableRow = (tableData) => {\n\n}\n\nconst StatsTable = props=>(\n   \n    <div className=\"statsTable\">\n        <table className =\"stats-table\">\n            <thead>\n            <tr>\n                    <th>Name</th>\n                    <th> Message Count</th>\n            </tr>\n            </thead>\n            <tbody>\n                {props.tableData.map((row,idx)=>(\n                   <tr id='addr0' key={idx} >\n                       <td>{row.name}</td>\n                       <td>{row.messageCount}</td>\n                   </tr> \n                ))}\n                \n            </tbody>\n        </table>\n\n        </div>\n   \n)\nexport default StatsTable;","const ParseChat = (content) => {\n  function generateRandomColor() {\n    var randomColor = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n    return randomColor;\n    //random color will be freshly served\n  }\n  var colorUsed = [];\n  var ChatData = [];\n  var ChatJSON = {};\n  var newContent = content.split(\"\\n\");\n  newContent.forEach((element, idx) => {\n    if (\n      element.indexOf(\"security code changed\") === -1 &&\n      (element.indexOf(\"AM]\") !== -1 || element.indexOf(\"PM]\") !== -1)\n    ) {\n      var key = element\n        .split(\"]\")[1];\n        if(key.indexOf(':')=== -1)\n        return;\n        key = key.split(\":\")[0]\n        .trim();\n      key = key.replace(\" \", \"_\");\n      if (ChatJSON[key]) {\n        ChatJSON[key] += 1;\n      } else {\n        ChatJSON[key] = 1;\n      }\n    }\n  });\n    for (let key in ChatJSON) {\n      if (key) {\n          var color = generateRandomColor();\n          while(colorUsed.indexOf(color)!==-1){\n              color = generateRandomColor();\n          }\n        ChatData.push({ name: key, messageCount: ChatJSON[key], color: color});\n      }\n    }\n\n  //console.log(ChatData);\n  return ChatData;\n};\nexport default ParseChat;\n","import React from \"react\";\nimport './FileReader.css';\nimport ChatParser from '../../utils/ChatParser';\n\nconst ImportFromFileBodyComponent = (props) => {\n  let fileReader;\n  const parseChatToArrayJSON = (content) =>{\n      return ChatParser(content);\n\n  }\n  const handleFileRead = (e) => {\n    const content = fileReader.result;\n    props.onChangeData(parseChatToArrayJSON(content));\n  };\n  const handleFileChose = (file) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n  \n    fileReader.readAsText(file);\n  };\n  return (\n    <div className=\"upload-whatsapp-chat\">\n        <label className='custom-file-input'>\n      <input\n        type=\"file\"\n        id=\"file\"\n        className=\"file-input\"\n        accept=\".txt\"\n        onChange={(e) => handleFileChose(e.target.files[0])}\n      ></input>\n      </label>\n      \n    </div>\n  );\n};\n\nexport default ImportFromFileBodyComponent;\n","import React, { Component } from \"react\";\nimport Header from \"../Header/Header\";\nimport Toolbar from \"../Toolbar/Toolbar\";\nimport \"./index.css\";\nimport Donut from '../DonutChart/DonutChart';\nimport StatsTable from \"../StatsTable/StatsTable\";\nimport FileReader from \"../FileReader/FileReader\";\n//\"#B21F00\", \"#C9DE00\", \"#2FDE00\", \"#00A6B4\", \"#6800B4\"\nconst data = [\n  { name: \"First user\", messageCount: \"120\", color: \"#00A6B4\" },\n  { name: \"Second user\", messageCount: \"134\", color: \"#C9DE00\" },\n  { name: \"Third user\", messageCount: \"100\", color: \"#2FDE00\" },\n];\n\n\nclass SiteLayout extends React.Component{\n\n  constructor()  {\n    super();\n    this.state =  {\n      data:[]\n    }\n  }\n  onChangeData(data){\n    this.setState({\n      data:data\n    })\n  };\n\n  render(){\n    return (  \n  <div className=\"site-layout\">\n    <Header />\n    <Toolbar></Toolbar>\n\n    <div className=\"siteLayout__body\">\n      <div className=\"flex_body\">\n        <div className=\"body_item1\">\n          <div className='file-reader-placement'><FileReader onChangeData={this.onChangeData.bind(this)}></FileReader></div>\n          <StatsTable tableData ={this.state.data} title={'ChatGroupName'}></StatsTable>\n        </div>\n        <div className=\"body_item2\">\n          <Donut chartData = {this.state.data} title={'ChatGroupName'}></Donut>\n        </div>\n      </div>\n    </div>\n  </div>\n  )\n}\n};\n\nexport default SiteLayout;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SiteLayout from \"./components/SiteLayout\";\nReactDOM.render(<SiteLayout />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}