{"version":3,"sources":["serviceWorker.js","components/Header/Header.js","components/Toolbar/Toolbar.js","utils/px2vw.js","styles/global.js","styles/MyStyles.js","components/StatsTable/StatsTable.js","components/SiteLayout/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","props","className","toolbar","href","px2vw","size","width","createGlobalStyle","styled","div","bgColor","h3","p","StatsTable","tableData","map","row","idx","id","key","name","messageCount","data","color","SiteLayout","ReactDOM","render","document","getElementById"],"mappings":"gLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCTSC,EAPA,SAAAC,GAAK,OACpB,yBAAKC,UAAU,UACX,yBAAKA,UAAU,mBAAf,YACK,0CCSMC,G,MAZC,SAAAF,GAAK,OACrB,4BAAQC,UAAU,WAClB,yBAAKA,UAAU,iBAAgB,uBAAGE,KAAK,KAAR,YAAsB,6BAAS,yCAC1D,yBAAKF,UAAU,uBACX,wBAAIA,UAAU,aACZ,oCACA,6C,sBCNKG,EAFD,SAACC,GAAD,IAAOC,EAAP,uDAAe,KAAf,gBAA4BD,EAAOC,EAAS,IAA5C,O,yUCGQC,YAAH,IAOAH,EAAM,IAGJA,EAAM,IAINA,EAAM,K,2gCCdFI,IAAOC,IAAV,IAIVL,EAAM,KAQCI,IAAOC,IAAV,IAELL,EAAM,IAAK,KACNA,EAAM,IAAK,KAEdA,EAAM,IACPA,EAAM,KACI,SAAAJ,GAAK,OAAIA,EAAMU,UAIxBN,EAAM,IAAK,KACNA,EAAM,IAAK,KAKhBA,EAAM,KACDA,EAAM,MAKAI,IAAOG,GAAV,KAUEH,IAAOI,EAAV,IACJR,EAAM,K,uBClBPS,EAxBI,SAAAb,GAAK,OAEpB,yBAAKC,UAAU,cACX,2BAAOA,UAAW,eACd,+BACA,4BACQ,oCACA,gDAGR,+BACKD,EAAMc,UAAUC,KAAI,SAACC,EAAIC,GAAL,OAClB,wBAAIC,GAAG,QAAQC,IAAKF,GAChB,4BAAKD,EAAII,MACT,4BAAKJ,EAAIK,sBCb1BC,EAAO,CACX,CAAEF,KAAM,aAAcC,aAAc,MAAOE,MAAO,QAClD,CAAEH,KAAM,cAAeC,aAAc,KAAME,MAAO,QAClD,CAAEH,KAAM,aAAcC,aAAc,KAAME,MAAO,SAkBpCC,EAhBI,SAACxB,GAAD,OACjB,yBAAKC,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAYa,UAAYQ,KAE1B,yBAAKrB,UAAU,mBClBvBwB,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,U","file":"static/js/main.a26cf3e0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport './Header.css'\nconst Header = props => (\n<div className='header'>\n    <div className=\"header__content\">\nWhatsapp <span>Stats</span>\n</div>\n</div>\n)\nexport default Header;","import React from 'react'\nimport './Toolbar.css'\nconst toolbar = props => (\n<header className=\"toolbar\">\n<div className=\"toolbar__logo\"><a href=\"/\" >WhatsApp <br></br><span>Stats</span></a></div>\n    <nav className=\"toolbar__navigation\">\n        <ul className='nav-links'>\n          <li>Home</li>\n          <li>about us</li>\n        </ul>\n      \n    </nav>\n</header>\n)\nexport default toolbar;","const px2vw = (size, width = 1440) => `${(size / width) * 100}vw`;\n\nexport default px2vw;","import { createGlobalStyle } from \"styled-components\";\nimport px2vw from \"../utils/px2vw\";\n\nexport const Global = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  :root {\n      font-size: ${px2vw(24)};\n\n      @media (min-width: 768px) {\n        font-size: ${px2vw(18)};\n      }\n\n      @media (min-width: 1024px) {\n        font-size: ${px2vw(16)};\n      }\n    }\n`;\n\nexport default Global;","import styled from \"styled-components\";\nimport px2vw from \"../utils/px2vw\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: ${px2vw(32)};\n  max-width: 90%;\n\n  @media (min-width: 1024px) {\n    flex-wrap: nowrap;\n  }\n`;\n\nexport const Box = styled.div`\n  display: flex;\n  width: ${px2vw(320, 768)};\n  min-height: ${px2vw(200, 768)};\n  flex-direction: column;\n  padding: ${px2vw(20)};\n  margin: ${px2vw(20)};\n  background-color: ${props => props.bgColor};\n  height: 50%;\n\n  @media (min-width: 768px) {\n    width: ${px2vw(320, 768)};\n    min-height: ${px2vw(200, 768)};\n    height: 40%;\n  }\n\n  @media (min-width: 1024px) {\n    width: ${px2vw(500)};\n    min-height: ${px2vw(300)};\n    height: 40%;\n  }\n`;\n\nexport const BoxTitle = styled.h3`\n  color: #333;\n  font-size: 2rem;\n  text-align: center;\n\n  @media (min-width: 1024px) {\n    font-size: 1.5rem;\n  }\n`;\n\nexport const BoxText = styled.p`\n  margin-top: ${px2vw(20)};\n  color: #666;\n  font-size: 1.5rem;\n\n  @media (min-width: 1024px) {\n    font-size: 1rem;\n  }\n`;","import React from 'react';\nimport './StatsTable.css';\n\nlet createTableRow = (tableData) => {\n\n}\n\nconst StatsTable = props=>(\n   \n    <div className=\"statsTable\">\n        <table className =\"stats-table\">\n            <thead>\n            <tr>\n                    <th>Name</th>\n                    <th> Message Count</th>\n            </tr>\n            </thead>\n            <tbody>\n                {props.tableData.map((row,idx)=>(\n                   <tr id='addr0' key={idx} >\n                       <td>{row.name}</td>\n                       <td>{row.messageCount}</td>\n                   </tr> \n                ))}\n                \n            </tbody>\n        </table>\n\n        </div>\n   \n)\nexport default StatsTable;","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Header from \"../Header/Header\";\nimport Toolbar from \"../Toolbar/Toolbar\";\nimport \"./index.css\";\nimport Global from \"../../styles/global\";\nimport ChartLayout from \"../ChartsLayouts/ChartsLayout\";\nimport StatsTable from \"../StatsTable/StatsTable\";\nconst data = [\n  { name: \"First user\", messageCount: \"120\", color: \"#ffd\" },\n  { name: \"Second user\", messageCount: \"34\", color: \"#ffe\" },\n  { name: \"Third user\", messageCount: \"10\", color: \"#ffc\" },\n];\nconst SiteLayout = (props) => (\n  <div className=\"site-layout\">\n    <Header />\n    <Toolbar></Toolbar>\n\n    <div className=\"siteLayout__body\">\n      <div className=\"flex_body\">\n        <div className=\"body_item1\">\n          <StatsTable tableData ={data}></StatsTable>\n        </div>\n        <div className=\"body_item2\"></div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default SiteLayout;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SiteLayout from \"./components/SiteLayout\";\nReactDOM.render(<SiteLayout />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}