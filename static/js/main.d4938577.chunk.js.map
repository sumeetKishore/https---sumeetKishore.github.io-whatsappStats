{"version":3,"sources":["serviceWorker.js","components/SiteLayout/index.js","pages/LandingPage/index.js","components/Toolbar/Toolbar.js","pages/index.js","index.js"],"names":["Boolean","window","location","hostname","match","SiteLayout","className","Component","defaultProps","title","LandingPage","props","toolbar","href","Pages","HashRouter","Route","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gDCfAC,G,6KAKF,OACE,yBAAKC,UAAU,oB,GANIC,cAgBzBF,EAAWG,aAAe,CACxBC,MAAO,UAGMJ,Q,OCREK,G,kDAXb,WAAYC,GAAO,+C,qDAIjB,OACE,yBAAKL,UAAU,oB,GANGC,cCYXK,G,MAbC,SAAAD,GAAK,OACrB,4BAAQL,UAAU,WACd,yBAAKA,UAAU,uBACX,8BACF,yBAAKA,UAAU,iBAAgB,uBAAGO,KAAK,KAAR,YAAqB,yCACpD,yBAAKP,UAAU,4BACX,4BACI,0CCgBCQ,E,uKAlBX,OACE,kBAACC,EAAA,EAAD,KACE,6BACI,kBAAC,EAAD,MACF,kBAAC,EAAD,KAEE,6BACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,Y,GAT3BH,aCApBa,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SL8H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d4938577.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./index.css\";\nclass SiteLayout extends Component {\n  /**\n   *\n   */\n  render() {\n    return (\n      <div className=\"site-layout\">\n      </div>\n    );\n  }\n}\n\nSiteLayout.propTypes = {\n  title: PropTypes.string\n}\n\nSiteLayout.defaultProps = {\n  title: \"Header\"\n};\n\nexport default SiteLayout;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./index.css\";\nclass LandingPage extends Component {\n    constructor(props) {\n    }  \n    render() {\n      \n      return (\n        <div className=\"landingPage\">\n                \n        </div>\n      );\n    }\n  }\n  export default LandingPage;\n  ","import React from 'react'\nimport './Toolbar.css'\nconst toolbar = props => (\n<header className=\"toolbar\">\n    <nav className=\"toolbar__navigation\">\n        <div></div>\n      <div className=\"toolbar__logo\"><a href=\"/\">WhatsApp <span>Stats</span></a></div>\n      <div className=\"toolbar__navigationitems\">\n          <ul>\n              <li>Menu</li>\n          </ul>\n      </div>\n    </nav>\n</header>\n)\nexport default toolbar;","import React, { Component } from \"react\";\nimport { HashRouter, Route, withRouter } from \"react-router-dom\";\nimport SiteLayout from \"../components/SiteLayout\";\nimport LandingPage from \"./LandingPage\";\nimport Toolbar from \"../components/Toolbar/Toolbar\";\nclass Pages extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n            <Toolbar></Toolbar>\n          <SiteLayout>\n\n            <div>\n              <Route exact path=\"/\" component={LandingPage} />\n\n              {/* <Route exact path=\"/aboutus\" component={AboutUs} /> */}\n            </div>\n          </SiteLayout>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default Pages;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Pages from \"./pages\";\nReactDOM.render(<Pages />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}