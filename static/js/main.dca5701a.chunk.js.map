{"version":3,"sources":["serviceWorker.js","components/SiteLayout/index.js","pages/LandingPage/index.js","components/Toolbar/Toolbar.js","components/DonutChart/DonutChart.js","components/Header/Header.js","pages/index.js","index.js"],"names":["Boolean","window","location","hostname","match","SiteLayout","className","Component","defaultProps","title","LandingPage","props","toolbar","href","state","labels","datasets","label","backgroundColor","hoverBackgroundColor","data","donut","options","display","text","fontSize","legend","position","Header","Pages","HashRouter","Style","Route","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kDCfAC,G,6KAKF,OACE,yBAAKC,UAAU,oB,GANIC,cAgBzBF,EAAWG,aAAe,CACxBC,MAAO,UAGMJ,Q,QCREK,G,kDAXb,WAAYC,GAAO,+C,qDAIjB,OACE,yBAAKL,UAAU,eAAf,gC,GANkBC,cCSXK,G,MAVC,SAAAD,GAAK,OACrB,4BAAQL,UAAU,WACd,yBAAKA,UAAU,uBACX,8BACF,yBAAKA,UAAU,iBAAgB,uBAAGO,KAAK,KAAR,YAAsB,yCACrD,yBAAKP,UAAU,4BAAf,Y,gBCHAQ,EAAQ,CACZC,OAAQ,CAAC,QAAS,SAAU,SACnB,UAAW,UACpBC,SAAU,CACR,CACEC,MAAO,YACPC,gBAAiB,CACf,UACA,UACA,UACA,UACA,WAEFC,qBAAsB,CACtB,UACA,UACA,UACA,UACA,WAEAC,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,OAuBdC,EAlBD,SAAAV,GAAK,OACnB,yBAAKL,UAAW,SAChB,kBAAC,IAAD,CACUc,KAAMN,EACNQ,QAAS,CACPb,MAAM,CACJc,SAAQ,EACRC,KAAK,+BACLC,SAAS,IAEXC,OAAO,CACLH,SAAQ,EACRI,SAAS,eChCRC,G,OAPA,SAAAjB,GAAK,OACpB,yBAAKL,UAAU,UACX,yBAAKA,UAAU,mBAAf,qBCgCWuB,E,uKA1BX,OACE,kBAACC,EAAA,EAAD,KACE,6BAEI,kBAAC,EAAD,MACA,yBAAKC,MAAM,gEACX,kBAAC,EAAD,UACA,yBAAKA,MAAM,sCACX,kBAAC,EAAD,QAGF,kBAAC,EAAD,KAGE,6BACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,GAAGC,UAAWzB,Y,GAjB1BH,aCHpB6B,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SP8H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dca5701a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./index.css\";\nclass SiteLayout extends Component {\n  /**\n   *\n   */\n  render() {\n    return (\n      <div className=\"site-layout\">\n      </div>\n    );\n  }\n}\n\nSiteLayout.propTypes = {\n  title: PropTypes.string\n}\n\nSiteLayout.defaultProps = {\n  title: \"Header\"\n};\n\nexport default SiteLayout;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./index.css\";\nclass LandingPage extends Component {\n    constructor(props) {\n    }  \n    render() {\n      \n      return (\n        <div className=\"landingPage\">\n              This is the landing page  \n        </div>\n      );\n    }\n  }\n  export default LandingPage;\n  ","import React from 'react'\nimport './Toolbar.css'\nconst toolbar = props => (\n<header className=\"toolbar\">\n    <nav className=\"toolbar__navigation\">\n        <div></div>\n      <div className=\"toolbar__logo\"><a href=\"/\" >WhatsApp <span>Stats</span></a></div>\n      <div className=\"toolbar__navigationitems\">menu\n      </div>\n    </nav>\n</header>\n)\nexport default toolbar;","import React from 'react';\nimport \"./DonutChart.css\";\nimport {Pie, Doughnut} from 'react-chartjs-2';\n\nconst state = {\n  labels: ['Nakul', 'Ritika', 'Sumeet',\n           'Shubham', 'Grejoy'],\n  datasets: [\n    {\n      label: 'Messagfes',\n      backgroundColor: [\n        '#B21F00',\n        '#C9DE00',\n        '#2FDE00',\n        '#00A6B4',\n        '#6800B4'\n      ],\n      hoverBackgroundColor: [\n      '#501800',\n      '#4B5000',\n      '#175000',\n      '#003350',\n      '#35014F'\n      ],\n      data: [65, 59, 80, 81, 56]\n    }\n  ]\n}\n\nconst donut = props=>(\n<div className =\"donut\">\n<Doughnut\n          data={state}\n          options={{\n            title:{\n              display:true,\n              text:'Text messages sent by person',\n              fontSize:20\n            },\n            legend:{\n              display:true,\n              position:'bottom'\n            }\n          }}\n        />\n</div>\n)\nexport default donut;","import React from 'react'\nimport './Header.css'\nconst Header = props => (\n<div className='header'>\n    <div className=\"header__content\">\nWhatsapp Stats\n</div>\n</div>\n)\nexport default Header;","import React, { Component } from \"react\";\nimport { HashRouter, Route, withRouter } from \"react-router-dom\";\nimport SiteLayout from \"../components/SiteLayout\";\nimport LandingPage from \"./LandingPage\";\nimport Toolbar from \"../components/Toolbar/Toolbar\";\nimport Donut from \"../components/DonutChart/DonutChart\";\nimport Header from \"../components/Header/Header\";\n\nclass Pages extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          \n            <Toolbar></Toolbar>\n            <div Style=\"width:100%; Height:100%; display:flex;flow-direction:column;\">\n            <Header> </Header> \n            <div Style=\"width:50%; top:20%; margin:8% auto\">\n            <Donut></Donut>\n            </div>\n            </div>\n          <SiteLayout>\n\n\n            <div>\n              <Route exact path=\"\" component={LandingPage} />\n\n              {/* <Route exact path=\"/aboutus\" component={AboutUs} /> */}\n            </div>\n          </SiteLayout>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default Pages;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Pages from \"./pages\";\nReactDOM.render(<Pages />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}